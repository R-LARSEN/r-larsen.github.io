---
title: "Assignment 2"
author: "Rebecca Larsen"
format: html
editor: visual
---

# LAB 1

by Dr. Karl Ho

\-\-\-\-\-\-\-\-\-\-\-\-\-\--

```{r}
# install and load pacman for package management
if (!require("pacman", character.only = TRUE)) install.packages("pacman")
library(pacman)
# load libraries using pacman
p_load("MASS", 
       "ISLR", 
       "car", 
       "haven", 
       "epiDisplay")
```

## Learning Basic Commands

## Create object using the assignment operator (\<-, =)

```{r}
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
```

## Using Function

```{r}
length(x)  # What does length() do?
length(y)
```

## Using +, -, \*, /,\^ operators

```{r}
x+y
ls() # List objects in the environment
rm(x,y) # Remove objects
ls()
rm(list=ls()) # Danger! What does this do?  Not recommended!
```

## Matrix operations

```{r}
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2) # Create a 2x2 matrix object
x
x=matrix(c(1,2,3,4),2,2)
matrix(c(1,2,3,4),2,2,byrow=TRUE) # What about byrow=F?

sqrt(x) # What does x look like?

x^2

x=rnorm(50) # Generate a vector of 50 numbers using the rnorm() function

y=x+rnorm(50,mean=50,sd=.1) # What does rnorm(50,mean=50,sd=.1) generate?

cor(x,y) # Correlation of x and y
set.seed(1303) # Set the seed for Random Number Generator (RNG) to generate values that are reproducible.
rnorm(50)
set.seed(3) # Try different seeds?
y=rnorm(100)

```

## Simple descriptive statistics

```{r}
mean(y)
var(y)
sqrt(var(y))
sd(y)
```

## Graphics Using R Graphics

```{r}
x=rnorm(100)
y=rnorm(100)
plot(x,y, pch=20, col = "steelblue") # Scatterplot for two numeric variables by default
plot(x,y, pch=20, col = "darkblue",xlab="this is the x-axis",ylab="this is the y-axis",main="Plot of X vs Y") # Add labels
pdf("Figure01.pdf") # Save as pdf, add a path or it will be stored on the project directory
plot(x,y,pch=20, col="lightgreen") # Try different colors?
dev.off() # Close the file using the dev.off function
x=seq(1,10) # Same as x=c(1:10)
x
x=1:10
x
x=seq(-pi,pi,length=50)
y=x
```

\-\-\-\-\-\-\-\-\-\--

# LAB 2

by Dr. Karl Ho

## R Programming Basic Commands

## Indexing Data using \[\]

```{r}
A=matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
```

## Loading data from Github

```{r}
Auto=read.table("https://raw.githubusercontent.com/karlho/knowledgemining/gh-pages/data/Auto.data")
# fix(Auto) # Starting the X11 R data editor
#If you run fix it allows you to interactively edit data. You can edit the data from the data frame.# 
Auto=read.table("https://raw.githubusercontent.com/karlho/knowledgemining/gh-pages/data/Auto.data",header=T,na.strings="?")
# fix(Auto)
Auto=read.csv("https://raw.githubusercontent.com/karlho/knowledgemining/gh-pages/data/Auto.csv",header=T,na.strings="?")
# fix(Auto)
dim(Auto)
Auto[1:4,]
Auto=na.omit(Auto)
dim(Auto)
names(Auto)

```

## Loading data from ISLR website

```{r Loaddata_from_web}
Auto=read.table("https://www.statlearning.com/s/Auto.data",header=T,na.strings="?")
dim(Auto)
```

## Additional Graphical and Numerical Summaries

```{r}
# plot(cylinders, mpg)
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
cylinders=as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col="darkblue")
plot(cylinders, mpg, col="purple", varwidth=T)
plot(cylinders, mpg, col="pink", varwidth=T,horizontal=T)
plot(cylinders, mpg, col="lightblue", varwidth=T, xlab="cylinders", ylab="MPG")
hist(mpg)
hist(mpg,col=2)
hist(mpg,col=2,breaks=15)
#pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower,mpg)
# identify(horsepower,mpg,name) # Interactive: point and click the dot to identify cases
summary(Auto)
summary(mpg)
```

## Linear Regression

```{r}
ptbu=c("MASS","ISLR")
lapply(ptbu, require, character.only = TRUE)

# Simple Linear Regression

# fix(Boston)
names(Boston)
# lm.fit=lm(medv~lstat)
attach(Boston)
lm.fit=lm(medv~lstat,data=Boston)
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
# What is the difference between "conference" and "prediction" difference?

plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="darkred")
plot(lstat,medv,col="darkred")
plot(lstat,medv,pch=16)
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
```

## Multiple Linear Regression

```{r}
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
```

## Non-linear Transformations of the Predictors

```{r}
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
```

## Qualitative Predictors

```{r}
# fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
```

## Interaction Terms (interactions and single effects

```{r}
summary(lm(medv~lstat*age,data=Boston))
```

\-\-\-\-\-\-\-\-\--

# Assignment 2

```{r}
TEDS_2016 <- read_dta('https://github.com/datageneration/home/blob/master/DataProgramming/data/TEDS_2016.dta?raw=true') #Note read_stata does not work with this version of R. Need to utilize haven library and "read_data" with apostrophe and not quotation marks around link. 
```

#### Question: What problems do I encounter with dataset?

Answer: There are a significant number of missing values in the form of NA in the dataset. It is also unclear if the "0" values are true 0 or if they are a different way of indicating a missing value.

#### Question: How to deal with missing values?

Answer: There are several methods to address missing data in a dataset.

1.  Listwise deletion: Removing the entire row of data to not include in the analysis if there are any missing values in that row. We could first detect missingness through a visualization to understand the impact listwise deletion could have on our data. If the missing values are not random and if they reduce our sample size substantially, this is likely to impact the strength of findings and using the dataset.

2.  Best guess imputation.

3.  Multiple imputation.

4.  Aggregate: If there is structure to the data, then we can aggregate so missing values do not have such an impact. For example, we could move from monthly to yearly.

# Explore Relationship between Tondu and other variables

```{r}
lm.fit=lm(Tondu~female+DPP+age+income+edu+Taiwanese+Econ_worse, data=TEDS_2016)
summary(lm.fit)
plot(lm.fit)
```

#### Frequency Table

```{r}
TEDS_2016$Tondu<-as.numeric(TEDS_2016$Tondu,labels=c("Unification now", "Status quo, unif. in future", "Status quo, decide later", "Status quo forever", "Status quo, indep. in future", "Independence now", "No response")) 
tab1(TEDS_2016$Tondu, sort.group = "decreasing", cum.percent = TRUE)
```
